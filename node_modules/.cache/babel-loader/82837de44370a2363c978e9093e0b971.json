{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // @ts-ignore\n\nconst node_fetch_1 = __importDefault(require(\"node-fetch\"));\n\nclass TeamTrees {\n  constructor(opt = {\n    rateLimit: false,\n    cache: {\n      enable: true,\n      duration: 5\n    }\n  }) {\n    this._cache = opt.cache || {\n      enable: false,\n      duration: 5\n    };\n    this._rateLimit = opt.rateLimit;\n    this._retryIn = Date.now() + (this._cache.duration || 5) * 60 * 1000;\n    this._data = this.getBody();\n    this._maxTrees = 20000000;\n    this._endDate = new Date(2020, 0, 1).getTime();\n  }\n\n  getLeft() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.assert();\n      const totalTrees = parseInt(yield this.getTotalTrees());\n      const fixed = String(this._maxTrees - totalTrees);\n      return {\n        daysLeft: parseInt(((this._endDate - Date.now()) / (1000 * 60 * 60 * 24)).toFixed()),\n        treesLeft: {\n          amount: {\n            fixed: fixed.replace(/\\d{1,3}(?=(\\d{3})+(?!\\d))/g, \"$&,\"),\n            value: this._maxTrees - totalTrees\n          },\n          percent: (totalTrees / this._maxTrees * 100).toFixed(2)\n        }\n      };\n    });\n  }\n\n  getTotalTrees(formatted) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.assert();\n      const body = yield this._data;\n      if (body == null) throw \"There was a error while getting the data\";\n      const regex = /<div id=\"totalTrees\" class=\"counter\" data-count=\"\\d+\">/g;\n      const total_trees = ((body.match(regex) || [])[0].match(/\\d+/g) || [])[0];\n      if (formatted) return total_trees.replace(/\\d{1,3}(?=(\\d{3})+(?!\\d))/g, \"$&,\");else return total_trees;\n    });\n  }\n\n  getMostRecent() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.assert();\n      const body = yield this._data;\n      if (body == null) throw \"There was a error while getting the data\";\n      const regex = /<div class=\"media pt-3\">(.*?)<\\/div>/gms;\n      const data = body.match(regex) || [];\n      const result = [];\n\n      for (let i = 0; i < data.length - 1; i++) this.result(data, i, result);\n\n      return result;\n    });\n  }\n\n  getMostTrees() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.assert();\n      const body = yield this._data;\n      if (body == null) throw \"There was a error while getting the data\";\n      const regex = /<div class=\"media pt-3\" data-trees-top=\"(\\d+)\">(.*?)<\\/div>/gms;\n      const data = body.match(regex) || [];\n      const result = [];\n\n      for (let i = 0; i < data.length; i++) this.result(data, i, result, true);\n\n      return result;\n    });\n  }\n\n  result(data, i, result, top) {\n    const name = (data[i].match(/<strong.*?>(.*?)<\\/strong>/m) || [])[1];\n    const trees = (data[i].match(/<span.*?class=\"(feed-tree-count.*)\">(.*) tree.*<\\/span>/m) || [])[2];\n    const message = (data[i].match(/<span.*?class=\"((?!feed-datetime|feed-tree-count).)*\">(.*?)<\\/span>/m) || [])[2];\n    const date = (data[i].match(/<span.*?>(.*(\\d+:\\d+:\\d+).*)<\\/span>/m) || [])[1];\n    const img = (data[i].match(/<img.*?src=\"(.*?)\">/m) || [])[1];\n    const val = {\n      name,\n      trees,\n      message,\n      date: new Date(date),\n      img: `https://teamtrees.org/${img}`\n    };\n    if (top) Object.assign(val, {\n      rank: i + 1\n    });\n    result.push(val);\n  }\n\n  getBody() {\n    // @ts-ignore\n    return node_fetch_1.default('https://teamtrees.org/').then(res => res.text());\n  }\n\n  loadCache() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._data = this.getBody();\n      this._retryIn = Date.now() + (this._cache.duration || 5) * 60 * 1000;\n    });\n  }\n\n  assert() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this._cache.enable) {\n        if (this._rateLimit && this._retryIn > Date.now()) throw \"Too many requests!\";else this._retryIn = Date.now() + 1000 * 30;\n      } else if (this._cache.enable && Date.now() > this._retryIn) this.loadCache();\n    });\n  }\n\n}\n\nexports.TeamTrees = TeamTrees;","map":{"version":3,"sources":["/Users/johnloberger/Flatiron/code/mod5/MyClimateFrontend/node_modules/teamtrees-api/dist/index.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__importDefault","mod","__esModule","Object","defineProperty","exports","node_fetch_1","require","TeamTrees","constructor","opt","rateLimit","cache","enable","duration","_cache","_rateLimit","_retryIn","Date","now","_data","getBody","_maxTrees","_endDate","getTime","getLeft","assert","totalTrees","parseInt","getTotalTrees","fixed","String","daysLeft","toFixed","treesLeft","amount","replace","percent","formatted","body","regex","total_trees","match","getMostRecent","data","i","length","getMostTrees","top","name","trees","message","date","img","val","assign","rank","push","default","res","text","loadCache"],"mappings":"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","sourcesContent":["\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// @ts-ignore\r\nconst node_fetch_1 = __importDefault(require(\"node-fetch\"));\r\nclass TeamTrees {\r\n    constructor(opt = { rateLimit: false, cache: { enable: true, duration: 5 } }) {\r\n        this._cache = opt.cache || { enable: false, duration: 5 };\r\n        this._rateLimit = opt.rateLimit;\r\n        this._retryIn = Date.now() + ((this._cache.duration || 5) * 60 * 1000);\r\n        this._data = this.getBody();\r\n        this._maxTrees = 20000000;\r\n        this._endDate = new Date(2020, 0, 1).getTime();\r\n    }\r\n    getLeft() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.assert();\r\n            const totalTrees = parseInt(yield this.getTotalTrees());\r\n            const fixed = String(this._maxTrees - totalTrees);\r\n            return {\r\n                daysLeft: parseInt(((this._endDate - Date.now()) / (1000 * 60 * 60 * 24)).toFixed()),\r\n                treesLeft: {\r\n                    amount: {\r\n                        fixed: fixed.replace(/\\d{1,3}(?=(\\d{3})+(?!\\d))/g, \"$&,\"),\r\n                        value: this._maxTrees - totalTrees\r\n                    },\r\n                    percent: ((totalTrees / this._maxTrees) * 100).toFixed(2)\r\n                }\r\n            };\r\n        });\r\n    }\r\n    getTotalTrees(formatted) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.assert();\r\n            const body = yield this._data;\r\n            if (body == null)\r\n                throw \"There was a error while getting the data\";\r\n            const regex = /<div id=\"totalTrees\" class=\"counter\" data-count=\"\\d+\">/g;\r\n            const total_trees = ((body.match(regex) || [])[0].match(/\\d+/g) || [])[0];\r\n            if (formatted)\r\n                return total_trees.replace(/\\d{1,3}(?=(\\d{3})+(?!\\d))/g, \"$&,\");\r\n            else\r\n                return total_trees;\r\n        });\r\n    }\r\n    getMostRecent() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.assert();\r\n            const body = yield this._data;\r\n            if (body == null)\r\n                throw \"There was a error while getting the data\";\r\n            const regex = /<div class=\"media pt-3\">(.*?)<\\/div>/gms;\r\n            const data = (body).match(regex) || [];\r\n            const result = [];\r\n            for (let i = 0; i < data.length - 1; i++)\r\n                this.result(data, i, result);\r\n            return result;\r\n        });\r\n    }\r\n    getMostTrees() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this.assert();\r\n            const body = yield this._data;\r\n            if (body == null)\r\n                throw \"There was a error while getting the data\";\r\n            const regex = /<div class=\"media pt-3\" data-trees-top=\"(\\d+)\">(.*?)<\\/div>/gms;\r\n            const data = (body).match(regex) || [];\r\n            const result = [];\r\n            for (let i = 0; i < data.length; i++)\r\n                this.result(data, i, result, true);\r\n            return result;\r\n        });\r\n    }\r\n    result(data, i, result, top) {\r\n        const name = (data[i].match(/<strong.*?>(.*?)<\\/strong>/m) || [])[1];\r\n        const trees = (data[i].match(/<span.*?class=\"(feed-tree-count.*)\">(.*) tree.*<\\/span>/m) || [])[2];\r\n        const message = (data[i].match(/<span.*?class=\"((?!feed-datetime|feed-tree-count).)*\">(.*?)<\\/span>/m) || [])[2];\r\n        const date = (data[i].match(/<span.*?>(.*(\\d+:\\d+:\\d+).*)<\\/span>/m) || [])[1];\r\n        const img = (data[i].match(/<img.*?src=\"(.*?)\">/m) || [])[1];\r\n        const val = { name, trees, message, date: new Date(date), img: `https://teamtrees.org/${img}` };\r\n        if (top)\r\n            Object.assign(val, { rank: i + 1 });\r\n        result.push(val);\r\n    }\r\n    getBody() {\r\n        // @ts-ignore\r\n        return node_fetch_1.default('https://teamtrees.org/').then(res => res.text());\r\n    }\r\n    loadCache() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this._data = this.getBody();\r\n            this._retryIn = Date.now() + ((this._cache.duration || 5) * 60 * 1000);\r\n        });\r\n    }\r\n    assert() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this._cache.enable) {\r\n                if (this._rateLimit && this._retryIn > Date.now())\r\n                    throw \"Too many requests!\";\r\n                else\r\n                    this._retryIn = Date.now() + (1000 * 30);\r\n            }\r\n            else if (this._cache.enable && Date.now() > this._retryIn)\r\n                this.loadCache();\r\n        });\r\n    }\r\n}\r\nexports.TeamTrees = TeamTrees;\r\n"]},"metadata":{},"sourceType":"script"}